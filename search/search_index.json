{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tEKS \u00b6 Terraform/Terragrunt Requirements Terragrunt Main purposes What you get Curated Features Enforced security Out of the box monitoring Helm v3 provider Other and not limited to Requirements Examples Additional infrastructure blocks Branches License tEKS is a set of Terraform / Terragrunt modules designed to get you everything you need to run a production EKS cluster on AWS. It ships with sensible defaults, and add a lot of common addons with their configurations that work out of the box. the v5 and further version of this project have been completely revamp and now offer a skeleton to use as a base for your infrastructure projects around EKS. All the modules have been moved outside this repository and get their own versioning. The old README is accessible here Terraform implementation will not be maintained anymore because of time, and mostly because it has become quite difficult to get feature parity with Terragrunt. Archive branch is available here Terraform/Terragrunt \u00b6 Terragrunt implementation is available in the terragrunt folder. Requirements \u00b6 Terragrunt \u00b6 Terraform Terragrunt Main purposes \u00b6 The main goal of this project is to glue together commonly used tooling with Kubernetes/EKS and to get from an AWS Account to a production cluster with everything you need without any manual configuration. What you get \u00b6 A production cluster all defined in IaaC with Terraform/Terragrunt: AWS VPC if needed based on terraform-aws-vpc EKS cluster base on terraform-aws-eks Kubernetes addons based on terraform-kubernetes-addons : provides various addons that are often used on Kubernetes and specifically on EKS. Everything is tied together with Terragrunt and allows you to deploy a multi cluster architecture in a matter of minutes (ok maybe an hour) and different AWS accounts for different environments. Curated Features \u00b6 The main additionals features are the curated addons list, see here and in the customization of the cluster policy Enforced security \u00b6 No IAM credentials on instances, everything is enforced with IRSA Each addons is deployed in it's own namespace with sensible default network policies. Calico Tigera Operator for network policy Out of the box monitoring \u00b6 Prometheus Operator with defaults dashboards Addons that support metrics are enable along with their serviceMonitor Custom grafana dashboard are available by default. Helm v3 provider \u00b6 All addons support Helm v3 configuration All charts are easily customizable Other and not limited to \u00b6 priorityClasses for addons use of [ kubectl-provider ], no more local exec and custom manifest are properly handled lot of manual stuff have been automated under the hood Requirements \u00b6 Terragrunt is not a hard requirement but all the modules are tested with Terragrunt. Terraform Terragrunt kubectl helm Examples \u00b6 terragrunt/live folder provides an opinionated directory structure for a production environment with an example using Additional infrastructure blocks \u00b6 If you wish to extend your infrastructure you can pick up additional modules on the particuleio github page . Some modules can also be found on the clusterfrak-dynamics github page . Branches \u00b6 main : Backward incompatible with v1.X but compatible with v2.X, releases bumped to v3.X because a lot has changed. release-1.X : Compatible with Terraform < 0.12 and Terragrunt < 0.19. Be sure to target the same modules version. release-2.X : Compatible with Terraform >= 0.12 and Terragrunt >= 0.19. Be sure to target the same modules version. License \u00b6","title":"Overview"},{"location":"#teks","text":"Terraform/Terragrunt Requirements Terragrunt Main purposes What you get Curated Features Enforced security Out of the box monitoring Helm v3 provider Other and not limited to Requirements Examples Additional infrastructure blocks Branches License tEKS is a set of Terraform / Terragrunt modules designed to get you everything you need to run a production EKS cluster on AWS. It ships with sensible defaults, and add a lot of common addons with their configurations that work out of the box. the v5 and further version of this project have been completely revamp and now offer a skeleton to use as a base for your infrastructure projects around EKS. All the modules have been moved outside this repository and get their own versioning. The old README is accessible here Terraform implementation will not be maintained anymore because of time, and mostly because it has become quite difficult to get feature parity with Terragrunt. Archive branch is available here","title":"tEKS"},{"location":"#terraformterragrunt","text":"Terragrunt implementation is available in the terragrunt folder.","title":"Terraform/Terragrunt"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#terragrunt","text":"Terraform Terragrunt","title":"Terragrunt"},{"location":"#main-purposes","text":"The main goal of this project is to glue together commonly used tooling with Kubernetes/EKS and to get from an AWS Account to a production cluster with everything you need without any manual configuration.","title":"Main purposes"},{"location":"#what-you-get","text":"A production cluster all defined in IaaC with Terraform/Terragrunt: AWS VPC if needed based on terraform-aws-vpc EKS cluster base on terraform-aws-eks Kubernetes addons based on terraform-kubernetes-addons : provides various addons that are often used on Kubernetes and specifically on EKS. Everything is tied together with Terragrunt and allows you to deploy a multi cluster architecture in a matter of minutes (ok maybe an hour) and different AWS accounts for different environments.","title":"What you get"},{"location":"#curated-features","text":"The main additionals features are the curated addons list, see here and in the customization of the cluster policy","title":"Curated Features"},{"location":"#enforced-security","text":"No IAM credentials on instances, everything is enforced with IRSA Each addons is deployed in it's own namespace with sensible default network policies. Calico Tigera Operator for network policy","title":"Enforced security"},{"location":"#out-of-the-box-monitoring","text":"Prometheus Operator with defaults dashboards Addons that support metrics are enable along with their serviceMonitor Custom grafana dashboard are available by default.","title":"Out of the box monitoring"},{"location":"#helm-v3-provider","text":"All addons support Helm v3 configuration All charts are easily customizable","title":"Helm v3 provider"},{"location":"#other-and-not-limited-to","text":"priorityClasses for addons use of [ kubectl-provider ], no more local exec and custom manifest are properly handled lot of manual stuff have been automated under the hood","title":"Other and not limited to"},{"location":"#requirements_1","text":"Terragrunt is not a hard requirement but all the modules are tested with Terragrunt. Terraform Terragrunt kubectl helm","title":"Requirements"},{"location":"#examples","text":"terragrunt/live folder provides an opinionated directory structure for a production environment with an example using","title":"Examples"},{"location":"#additional-infrastructure-blocks","text":"If you wish to extend your infrastructure you can pick up additional modules on the particuleio github page . Some modules can also be found on the clusterfrak-dynamics github page .","title":"Additional infrastructure blocks"},{"location":"#branches","text":"main : Backward incompatible with v1.X but compatible with v2.X, releases bumped to v3.X because a lot has changed. release-1.X : Compatible with Terraform < 0.12 and Terragrunt < 0.19. Be sure to target the same modules version. release-2.X : Compatible with Terraform >= 0.12 and Terragrunt >= 0.19. Be sure to target the same modules version.","title":"Branches"},{"location":"#license","text":"","title":"License"},{"location":"user-guides/eks-addons/","text":"EKS addons module \u00b6 terraform-kubernetes-addons:aws is a custom module maintained here and provides: helm v3 charts manifests operators For commonly used addons one Kubernetes and most specifically with EKS. The deployments are curated to be tightly integrated with AWS and EKS. The following addons are available and work out of the box. Helm charts \u00b6 All charts have been tested with Helm v3 and the terraform-provider-helm v1.0 which supports Helm v3. They can be easily customize with custom values. cluster-autoscaler : scale worker nodes based on workload. external-dns : sync ingress and service records in route53. cert-manager : automatically generate TLS certificates, supports ACME v2. nginx-ingress : processes Ingress object and acts as a HTTP/HTTPS proxy (compatible with cert-manager). metrics-server : enable metrics API and horizontal pod scaling (HPA). prometheus-operator : Monitoring / Alerting / Dashboards. fluentd-cloudwatch : forwards logs to AWS Cloudwatch. node-problem-detector : Forwards node problems to Kubernetes events flux : Continuous Delivery with Gitops workflow. sealed-secrets : Technology agnostic, store secrets on git. kong : API Gateway ingress controller. keycloak : Identity and access management Kubernetes Manifests \u00b6 Kubernetes manifests are deployed with terraform-provider-kubectl cni-metrics-helper : Provides cloudwatch metrics for VPC CNI plugins. Operator \u00b6 Some project are transitioning to Operators . Istio is going to drop Helm support and is not compatible with Helm v3 so it has been removed and replaced with the Istio operator istio-operator : Service mesh for Kubernetes. IAM permissions \u00b6 Some addons require specific IAM permission. This can be done by either: IRSA: IAM role for service account which is the default and recommended way Addons that need IAM access have two variables: create_resources_irsa : default to true and uses IAM role for service account There is no specific config, everything is taken care of by the module. Customization \u00b6 All the configuration is done in eks-addons/terragrunt.hcl . Default charts values \u00b6 Some values are defined by default directly into the module. These can off course be overridden and or merged/replaced. You can find the defaults values in the upstream module . Eg. default values for cluster-autoscaler are in cluster-autoscaler.tf . Overriding Helm provider values \u00b6 Helm provider have defaults values defined here : helm_de faults _de faults = { a t omic = false clea nu p_o n _ fa il = false depe n de n cy_upda te = false disable_crd_hooks = false disable_webhooks = false f orce_upda te = false recrea te _pods = false re n der_subchar t _ n o tes = true replace = false rese t _values = false reuse_values = false skip_crds = false t imeou t = 3600 veri f y = false wai t = true ex tra _values = \"\" } These can be overridden globally with the helm_defaults input variable or can be overridden per chart in terragrunt.hcl : helm_de faults = { replace = true veri f y = true t imeou t = 300 } clus ter _au t oscaler = { crea te _iam_resources_irsa = true iam_policy_override = \"\" versio n = \"v1.14.7\" char t _versio n = \"6.4.0\" e na bled = true de fault _ net work_policy = true clus ter _ na me = depe n de n cy.eks.ou t pu ts .clus ter _id t imeou t = 3600 <= here you ca n add a n y helm provider override } Overriding charts values.yaml \u00b6 It is possible to add or override values per charts. Helm provider use the same merge logic as Helm so you can basically rewrite the whole values.yaml if needed. Each chart has a extra_values variable where you can specify custom values. flu x = { crea te _iam_resources_irsa = true versio n = \"1.18.0\" char t _versio n = \"1.2.0\" e na bled = false de fault _ net work_policy = true ex tra _values = <<EXTRA_VALUES gi t : url : \"ssh://git@gitlab.com/myrepo/gitops-${local.env}.git\" pollI nter val : \"2m\" rbac : crea te : false regis tr y : au t oma t io n I nter val : \"2m\" EXTRA_VALUES } There are some examples in the terragrunt.hcl file. Not all the variables available are present. If you want a full list of variable, you can find them in the upstream module . For example for cluster-autoscaler you can see the default here .","title":"EKS Addons"},{"location":"user-guides/eks-addons/#eks-addons-module","text":"terraform-kubernetes-addons:aws is a custom module maintained here and provides: helm v3 charts manifests operators For commonly used addons one Kubernetes and most specifically with EKS. The deployments are curated to be tightly integrated with AWS and EKS. The following addons are available and work out of the box.","title":"EKS addons module"},{"location":"user-guides/eks-addons/#helm-charts","text":"All charts have been tested with Helm v3 and the terraform-provider-helm v1.0 which supports Helm v3. They can be easily customize with custom values. cluster-autoscaler : scale worker nodes based on workload. external-dns : sync ingress and service records in route53. cert-manager : automatically generate TLS certificates, supports ACME v2. nginx-ingress : processes Ingress object and acts as a HTTP/HTTPS proxy (compatible with cert-manager). metrics-server : enable metrics API and horizontal pod scaling (HPA). prometheus-operator : Monitoring / Alerting / Dashboards. fluentd-cloudwatch : forwards logs to AWS Cloudwatch. node-problem-detector : Forwards node problems to Kubernetes events flux : Continuous Delivery with Gitops workflow. sealed-secrets : Technology agnostic, store secrets on git. kong : API Gateway ingress controller. keycloak : Identity and access management","title":"Helm charts"},{"location":"user-guides/eks-addons/#kubernetes-manifests","text":"Kubernetes manifests are deployed with terraform-provider-kubectl cni-metrics-helper : Provides cloudwatch metrics for VPC CNI plugins.","title":"Kubernetes Manifests"},{"location":"user-guides/eks-addons/#operator","text":"Some project are transitioning to Operators . Istio is going to drop Helm support and is not compatible with Helm v3 so it has been removed and replaced with the Istio operator istio-operator : Service mesh for Kubernetes.","title":"Operator"},{"location":"user-guides/eks-addons/#iam-permissions","text":"Some addons require specific IAM permission. This can be done by either: IRSA: IAM role for service account which is the default and recommended way Addons that need IAM access have two variables: create_resources_irsa : default to true and uses IAM role for service account There is no specific config, everything is taken care of by the module.","title":"IAM permissions"},{"location":"user-guides/eks-addons/#customization","text":"All the configuration is done in eks-addons/terragrunt.hcl .","title":"Customization"},{"location":"user-guides/eks-addons/#default-charts-values","text":"Some values are defined by default directly into the module. These can off course be overridden and or merged/replaced. You can find the defaults values in the upstream module . Eg. default values for cluster-autoscaler are in cluster-autoscaler.tf .","title":"Default charts values"},{"location":"user-guides/eks-addons/#overriding-helm-provider-values","text":"Helm provider have defaults values defined here : helm_de faults _de faults = { a t omic = false clea nu p_o n _ fa il = false depe n de n cy_upda te = false disable_crd_hooks = false disable_webhooks = false f orce_upda te = false recrea te _pods = false re n der_subchar t _ n o tes = true replace = false rese t _values = false reuse_values = false skip_crds = false t imeou t = 3600 veri f y = false wai t = true ex tra _values = \"\" } These can be overridden globally with the helm_defaults input variable or can be overridden per chart in terragrunt.hcl : helm_de faults = { replace = true veri f y = true t imeou t = 300 } clus ter _au t oscaler = { crea te _iam_resources_irsa = true iam_policy_override = \"\" versio n = \"v1.14.7\" char t _versio n = \"6.4.0\" e na bled = true de fault _ net work_policy = true clus ter _ na me = depe n de n cy.eks.ou t pu ts .clus ter _id t imeou t = 3600 <= here you ca n add a n y helm provider override }","title":"Overriding Helm provider values"},{"location":"user-guides/eks-addons/#overriding-charts-valuesyaml","text":"It is possible to add or override values per charts. Helm provider use the same merge logic as Helm so you can basically rewrite the whole values.yaml if needed. Each chart has a extra_values variable where you can specify custom values. flu x = { crea te _iam_resources_irsa = true versio n = \"1.18.0\" char t _versio n = \"1.2.0\" e na bled = false de fault _ net work_policy = true ex tra _values = <<EXTRA_VALUES gi t : url : \"ssh://git@gitlab.com/myrepo/gitops-${local.env}.git\" pollI nter val : \"2m\" rbac : crea te : false regis tr y : au t oma t io n I nter val : \"2m\" EXTRA_VALUES } There are some examples in the terragrunt.hcl file. Not all the variables available are present. If you want a full list of variable, you can find them in the upstream module . For example for cluster-autoscaler you can see the default here .","title":"Overriding charts values.yaml"},{"location":"user-guides/eks/","text":"EKS module \u00b6 Upstream configuration \u00b6 EKS module is also upstream and allow to deploy an EKS cluster which supports: managed node pools launch configuration node pools launch template node pools tEKS uses launch template by default and use one node pool per availability zone. You can use any inputs from the upstream module to configure the cluster in eks/terragrunt.hcl .","title":"EKS"},{"location":"user-guides/eks/#eks-module","text":"","title":"EKS module"},{"location":"user-guides/eks/#upstream-configuration","text":"EKS module is also upstream and allow to deploy an EKS cluster which supports: managed node pools launch configuration node pools launch template node pools tEKS uses launch template by default and use one node pool per availability zone. You can use any inputs from the upstream module to configure the cluster in eks/terragrunt.hcl .","title":"Upstream configuration"},{"location":"user-guides/getting-started/","text":"Getting started \u00b6 Tooling requirements \u00b6 The necessary tools are in requirements.yaml you can install them any way you want, make sure they are available in your $PATH. The following dependencies are required on the deployer host: Terraform Terragrunt kubectl helm aws-iam-authenticator AWS requirements \u00b6 At least one AWS account awscli configured ( see installation instructions ) to access your AWS account. A route53 hosted zone if you plan to use external-dns or cert-manager but it is not a hard requirement. Getting the template repository \u00b6 You can either clone the repo locally or generate/fork a template from github. git clone https://github.com/particuleio/teks.git The terraform directory structure is the following: . \u2514\u2500\u2500 live \u251c\u2500\u2500 backend \u2502 \u251c\u2500\u2500 backend.tf \u2502 \u251c\u2500\u2500 providers.tf \u2502 \u2514\u2500\u2500 state.tf \u251c\u2500\u2500 demo \u2502 \u251c\u2500\u2500 env_tags.yaml \u2502 \u2514\u2500\u2500 eu-west-3 \u2502 \u251c\u2500\u2500 clusters \u2502 \u2502 \u2514\u2500\u2500 full \u2502 \u2502 \u251c\u2500\u2500 eks \u2502 \u2502 \u2502 \u251c\u2500\u2500 aws-provider.tf -> ../../../../../shared/aws-provider.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 backend.tf -> ../../../../../backend/backend.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 data.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 locals.tf -> ../../../../../shared/locals.tf \u2502 \u2502 \u2502 \u2514\u2500\u2500 main.tf \u2502 \u2502 \u251c\u2500\u2500 eks-addons \u2502 \u2502 \u2502 \u251c\u2500\u2500 aws-provider.tf -> ../../../../../shared/aws-provider.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 backend.tf -> ../../../../../backend/backend.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 data.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 locals.tf -> ../../../../../shared/locals.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 main.tf \u2502 \u2502 \u2502 \u2514\u2500\u2500 versions.tf \u2502 \u2502 \u2514\u2500\u2500 vpc \u2502 \u2502 \u251c\u2500\u2500 aws-provider.tf -> ../../../../../shared/aws-provider.tf \u2502 \u2502 \u251c\u2500\u2500 backend.tf -> ../../../../../backend/backend.tf \u2502 \u2502 \u251c\u2500\u2500 locals.tf -> ../../../../../shared/locals.tf \u2502 \u2502 \u2514\u2500\u2500 main.tf \u2502 \u2514\u2500\u2500 region_values.yaml \u251c\u2500\u2500 global_tags.yaml \u251c\u2500\u2500 global_values.yaml \u2514\u2500\u2500 shared \u251c\u2500\u2500 aws-provider.tf \u2514\u2500\u2500 locals.tf Each cluster in inside the terraform/live folder and then modules are grouped by AWS region. Start a new cluster \u00b6 Create a new cluster beside demo : cp -ar demo mycluster Configuring the remote state \u00b6 Configuration of the remote state is based on the value of the global_values.yaml file in the terraform and the terragrunt directories based on the installation method you used. Both files are following the same structure. --- aws_account_id : 161285725140 prefix : pio-teks tf_state_bucket_region : eu-west-1 github_owner : particuleio Adapt these values to match your configuration ( prefix , 'project'). Based on the configuration, both methods will create the following resources: S3 bucket named {prefix}-{project}-{tf|tg}-state : store the state DynamoDB table named {prefix}-{project}-{tf|tg}-state-lock : prevent concurrent use The resource names will include information based on the configuration method used. Using terraform will create resources with tf in their name, and tg when using terragrunt . Using the current values, the resources created to use terraform will be: S3: pio-teks-tf-state DynamoDB: pio-state-tf-state-lock Remote state for Terraform \u00b6 If you plan on using terraform to setup teks , you need to create your remote backend using cloudposse/terraform-aws-tfstate-backend configured in terraform/live/backend/state.tf . In order to configure the S3 backend for terraform, configure your global_values.yaml then go in the terraform/live/backend directory. terraform init init the terraform module. terraform apply -auto-approve to create the S3 backend. terraform init -force-copy will copy the local backend to the S3 backend. The terraform-aws-tfstate-backend module will create or update the terraform/live/backend/backend.tf file, which is symlinked to the child modules ( vpc , eks , eks-addons ). Further documentation regarding the remote backend configuration can be found at terraform-aws-tfstate-backend#create . Remote state for Terragrunt \u00b6 terragrunt/live/demo/terragrunt.hcl is the parent terragrunt file use to configure remote state. The configuration is done automatically based on the terragrunt/live/global_values.yaml file. The values here will generate automatically the parent terragrunt file. You can either customize the values or edit directly the terragrunt.hcl file. Running Terragrunt command \u00b6 Terragrunt command are run inside their respective folder, for example, to run the vpc module: cd vpc terragrunt apply","title":"Getting started"},{"location":"user-guides/getting-started/#getting-started","text":"","title":"Getting started"},{"location":"user-guides/getting-started/#tooling-requirements","text":"The necessary tools are in requirements.yaml you can install them any way you want, make sure they are available in your $PATH. The following dependencies are required on the deployer host: Terraform Terragrunt kubectl helm aws-iam-authenticator","title":"Tooling requirements"},{"location":"user-guides/getting-started/#aws-requirements","text":"At least one AWS account awscli configured ( see installation instructions ) to access your AWS account. A route53 hosted zone if you plan to use external-dns or cert-manager but it is not a hard requirement.","title":"AWS requirements"},{"location":"user-guides/getting-started/#getting-the-template-repository","text":"You can either clone the repo locally or generate/fork a template from github. git clone https://github.com/particuleio/teks.git The terraform directory structure is the following: . \u2514\u2500\u2500 live \u251c\u2500\u2500 backend \u2502 \u251c\u2500\u2500 backend.tf \u2502 \u251c\u2500\u2500 providers.tf \u2502 \u2514\u2500\u2500 state.tf \u251c\u2500\u2500 demo \u2502 \u251c\u2500\u2500 env_tags.yaml \u2502 \u2514\u2500\u2500 eu-west-3 \u2502 \u251c\u2500\u2500 clusters \u2502 \u2502 \u2514\u2500\u2500 full \u2502 \u2502 \u251c\u2500\u2500 eks \u2502 \u2502 \u2502 \u251c\u2500\u2500 aws-provider.tf -> ../../../../../shared/aws-provider.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 backend.tf -> ../../../../../backend/backend.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 data.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 locals.tf -> ../../../../../shared/locals.tf \u2502 \u2502 \u2502 \u2514\u2500\u2500 main.tf \u2502 \u2502 \u251c\u2500\u2500 eks-addons \u2502 \u2502 \u2502 \u251c\u2500\u2500 aws-provider.tf -> ../../../../../shared/aws-provider.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 backend.tf -> ../../../../../backend/backend.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 data.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 locals.tf -> ../../../../../shared/locals.tf \u2502 \u2502 \u2502 \u251c\u2500\u2500 main.tf \u2502 \u2502 \u2502 \u2514\u2500\u2500 versions.tf \u2502 \u2502 \u2514\u2500\u2500 vpc \u2502 \u2502 \u251c\u2500\u2500 aws-provider.tf -> ../../../../../shared/aws-provider.tf \u2502 \u2502 \u251c\u2500\u2500 backend.tf -> ../../../../../backend/backend.tf \u2502 \u2502 \u251c\u2500\u2500 locals.tf -> ../../../../../shared/locals.tf \u2502 \u2502 \u2514\u2500\u2500 main.tf \u2502 \u2514\u2500\u2500 region_values.yaml \u251c\u2500\u2500 global_tags.yaml \u251c\u2500\u2500 global_values.yaml \u2514\u2500\u2500 shared \u251c\u2500\u2500 aws-provider.tf \u2514\u2500\u2500 locals.tf Each cluster in inside the terraform/live folder and then modules are grouped by AWS region.","title":"Getting the template repository"},{"location":"user-guides/getting-started/#start-a-new-cluster","text":"Create a new cluster beside demo : cp -ar demo mycluster","title":"Start a new cluster"},{"location":"user-guides/getting-started/#configuring-the-remote-state","text":"Configuration of the remote state is based on the value of the global_values.yaml file in the terraform and the terragrunt directories based on the installation method you used. Both files are following the same structure. --- aws_account_id : 161285725140 prefix : pio-teks tf_state_bucket_region : eu-west-1 github_owner : particuleio Adapt these values to match your configuration ( prefix , 'project'). Based on the configuration, both methods will create the following resources: S3 bucket named {prefix}-{project}-{tf|tg}-state : store the state DynamoDB table named {prefix}-{project}-{tf|tg}-state-lock : prevent concurrent use The resource names will include information based on the configuration method used. Using terraform will create resources with tf in their name, and tg when using terragrunt . Using the current values, the resources created to use terraform will be: S3: pio-teks-tf-state DynamoDB: pio-state-tf-state-lock","title":"Configuring the remote state"},{"location":"user-guides/getting-started/#remote-state-for-terraform","text":"If you plan on using terraform to setup teks , you need to create your remote backend using cloudposse/terraform-aws-tfstate-backend configured in terraform/live/backend/state.tf . In order to configure the S3 backend for terraform, configure your global_values.yaml then go in the terraform/live/backend directory. terraform init init the terraform module. terraform apply -auto-approve to create the S3 backend. terraform init -force-copy will copy the local backend to the S3 backend. The terraform-aws-tfstate-backend module will create or update the terraform/live/backend/backend.tf file, which is symlinked to the child modules ( vpc , eks , eks-addons ). Further documentation regarding the remote backend configuration can be found at terraform-aws-tfstate-backend#create .","title":"Remote state for Terraform"},{"location":"user-guides/getting-started/#remote-state-for-terragrunt","text":"terragrunt/live/demo/terragrunt.hcl is the parent terragrunt file use to configure remote state. The configuration is done automatically based on the terragrunt/live/global_values.yaml file. The values here will generate automatically the parent terragrunt file. You can either customize the values or edit directly the terragrunt.hcl file.","title":"Remote state for Terragrunt"},{"location":"user-guides/getting-started/#running-terragrunt-command","text":"Terragrunt command are run inside their respective folder, for example, to run the vpc module: cd vpc terragrunt apply","title":"Running Terragrunt command"},{"location":"user-guides/vpc/","text":"VPC module \u00b6 The vpc module is the one from upstream . To customize it. Modify the vpc/terragrunt.hcl file. You can use any inputs available in the upstream module.","title":"VPC"},{"location":"user-guides/vpc/#vpc-module","text":"The vpc module is the one from upstream . To customize it. Modify the vpc/terragrunt.hcl file. You can use any inputs available in the upstream module.","title":"VPC module"}]}